#!/bin/bash -e

# section: Demo Environment Setup
make deploy-testnet
kubectl rollout status deploy/ganache
# may need to sleep here to see logs
# the created addresses will be in the log:
#    kubectl logs deploy/ganache
# may need to re-try / sleep here until ganache initializes
make deploy-token

# ganache generates 10 address for testing. This is first address generated by ganache. 
# You can see it in the ganache logs. If your output does not contain this address, adjust this 
# variable accordingly.
export ADDRESS=0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1
# Link token address from the above link token deployment.
export LINK_TOKEN=0x5b1869d9a4c187f2eaa108f3062412ecf0526b24

# Deploy the chainlink node into kind.
make deploy-node

# Wait for node to become ready (it may crash a couple of times while the db initializes):
kubectl rollout status deploy/chainlink

export NODE_ADDR=$(kubectl logs deploy/chainlink|grep "please deposit ETH into your address:"| tr ' ' '\n'|grep 0x)

# Add 10 eth to the node
geth attach http://localhost:32000 -exec 'eth.sendTransaction({from: "'${ADDRESS}'",to: "'${NODE_ADDR}'", value: "10000000000000000000"})'

# Add link to the node
geth attach http://localhost:32000 --jspath ./scripts -exec 'loadScript("fund.js");transfer("'$LINK_TOKEN'", "'$ADDRESS'", "'$NODE_ADDR'");'

# Optional - verify node balance:
geth attach http://localhost:32000 --jspath ./scripts -exec 'loadScript("fund.js");getbalance("'$LINK_TOKEN'", "'$ADDRESS'", "'$NODE_ADDR'");'

# this will also add the node to the oracle (by using the address in the env-var )
npm run deploy-oracle | tee node-tmp.txt
export ORACLE_ADDR=$(grep "contract-address" node-tmp.txt | cut -f 2)
rm node-tmp.txt

# section: Deploy twitter adapter
kubectl port-forward deploy/chainlink 6688&
# give kubectl a second to start working
sleep 1

curl -c cookiefile \
  -d '{"email":"foo@example.com", "password":"apipassword"}' \
  -X POST -H 'Content-Type: application/json' \
   http://localhost:6688/sessions

curl -b cookiefile http://localhost:6688/v2/bridge_types -XPOST -H"content-type: application/json" -d @adapter/bridge.json > bridge_create.json
export INCOMING_TOKEN=$(jq '.data.attributes.incomingToken' bridge_create.json -r)
export OUTGOING_TOKEN=$(jq '.data.attributes.outgoingToken' bridge_create.json -r)
rm bridge_create.json

# create a kubernetes secret with all our keys
kubectl create secret generic twitter-adapter \
    --from-literal=TWITTER_API_KEY=$TWITTER_API_KEY \
    --from-literal=TWITTER_API_KEY_SECRET=$TWITTER_API_KEY_SECRET \
    --from-literal=TWITTER_ACCESS_TOKEN=$TWITTER_ACCESS_TOKEN \
    --from-literal=TWITTER_ACCESS_TOKEN_SECRET=$TWITTER_ACCESS_TOKEN_SECRET \
    --from-literal=INCOMING_TOKEN=$INCOMING_TOKEN \
    --from-literal=OUTGOING_TOKEN=$OUTGOING_TOKEN
# deploy the external adapter
make deploy-adapter

# add the current oracle address to the job spec
sed -e "s/ORACLE_ADDR/$ORACLE_ADDR/" adapter/jobspec.json > jobspec.json
# add the job to the node, and save the job id.
export TWITTER_JOB_ID=$(curl -b cookiefile http://localhost:6688/v2/specs -XPOST -H"content-type: application/json" -d @jobspec.json | jq .data.id -r)
rm jobspec.json

echo '{"jobId":"'$TWITTER_JOB_ID'", "oracleAddr":"'$ORACLE_ADDR'"}' > examples/app/public/oracle.json

echo export ORACLE_ADDR=$ORACLE_ADDR
echo export TWITTER_JOB_ID=$TWITTER_JOB_ID

